package com.rakbank.accountmanagement.config;

package com.rakbank.accountmanagement.controller;

import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.rakbank.accountmanagement.dto.AccountDTO;
import com.rakbank.accountmanagement.dto.PasswordUpdateRequest;
import com.rakbank.accountmanagement.service.AccountService;
import com.rakbank.accountmanagement.service.SessionService;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import jakarta.validation.Valid;

@RestController
@RequestMapping("/users")
public class AccountController {

    @Autowired
    private AccountService accountService;

    @Autowired
    private SessionService sessionService;

    private String getSessionIdFromRequest(HttpHeaders headers) {
        return headers.getFirst("Session-ID"); 
    }

    private boolean isSessionValid(String sessionId) {
        return sessionService.isValidSession(sessionId);
    }
    
    
    @PostMapping("/register")
	public ResponseEntity<Map<String, Object>> registerAccount(@Valid @RequestBody AccountDTO accountDTO) {
		Map<String, Object> response = accountService.createAccount(accountDTO);
		return ResponseEntity.status(HttpStatus.CREATED).body(response);
	}

	@PostMapping("/login")
	public Map<String, Object> loginAccount(@RequestBody AccountDTO accountDTO) {
		return accountService.loginAccount(accountDTO);
	}

    @PatchMapping("/{id}/password")
    public ResponseEntity<Map<String, Object>> updatePassword(@PathVariable Long id,
                                                               @RequestBody PasswordUpdateRequest request,
                                                               @RequestHeader HttpHeaders headers) {
        String sessionId = getSessionIdFromRequest(headers);
        if (sessionId == null || !isSessionValid(sessionId)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("status", "failure", "message", "Invalid or missing session ID"));
        }
        Map<String, Object> response = accountService.updatePassword(id, request.getNewPassword());
        String status = (String) response.get("status");
        return "success".equals(status) ? ResponseEntity.ok(response) : ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }

    @PutMapping("/{id}")
    public ResponseEntity<Map<String, Object>> updateAccount(@PathVariable Long id,
                                                               @RequestBody AccountDTO accountDTO,
                                                               @RequestHeader HttpHeaders headers) {
        String sessionId = getSessionIdFromRequest(headers);
        if (sessionId == null || !isSessionValid(sessionId)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("status", "failure", "message", "Invalid or missing session ID"));
        }
        Map<String, Object> response = accountService.updateAccount(id, accountDTO);
        String status = (String) response.get("status");
        return "success".equals(status) ? ResponseEntity.ok(response) : ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }
    
    @ApiOperation(value = "Get all accounts", notes = "Returns a list of all accounts")
    @ApiResponses(value = {
        @ApiResponse(code = 200, message = "Successfully retrieved accounts"),
        @ApiResponse(code = 204, message = "No content found"),
        @ApiResponse(code = 401, message = "Unauthorized access")
    })
    @GetMapping()
    public ResponseEntity<List<AccountDTO>> getAllAccounts(@ApiParam(value = "Session ID for authorization", required = true) 
    @RequestHeader(HttpHeaders.AUTHORIZATION) String sessionId) {
        if (sessionId == null || !isSessionValid(sessionId)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }

        List<AccountDTO> accounts = accountService.getAllAccounts();
        if (accounts.isEmpty()) {
            return ResponseEntity.noContent().build();
        }

        return ResponseEntity.ok(accounts);
    }

    @GetMapping("/{id}")
    public ResponseEntity<AccountDTO> getAccountById(@PathVariable Long id,
                                                     @RequestHeader HttpHeaders headers) {
        String sessionId = getSessionIdFromRequest(headers);
        if (sessionId == null || !isSessionValid(sessionId)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
        }
        return accountService.getAccountById(id).map(ResponseEntity::ok)
                .orElseGet(() -> ResponseEntity.notFound().build());
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<Map<String, Object>> deleteAccount(@PathVariable Long id,
                                                              @RequestHeader HttpHeaders headers) {
        String sessionId = getSessionIdFromRequest(headers);
        if (sessionId == null || !isSessionValid(sessionId)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(Map.of("status", "failure", "message", "Invalid or missing session ID"));
        }
        Map<String, Object> response = accountService.deleteAccount(id);
        String status = (String) response.get("status");
        return "success".equals(status) ? ResponseEntity.ok(response) : ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
    }
}
